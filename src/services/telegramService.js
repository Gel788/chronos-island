// src/services/telegramService.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram –±–æ—Ç

class TelegramService {
  constructor() {
    this.botToken = '8068992681:AAH6YkH82WmCgMTdxF6X5Nf7I4Km0vEWk2w'
    this.chatId = '-1003208977801' // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π chat ID –¥–ª—è –≥—Ä—É–ø–ø—ã
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  async sendMessage(text, options = {}) {
    try {
      const url = `${this.baseUrl}/sendMessage`
      const payload = {
        chat_id: this.chatId,
        text: text,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...options
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(`Telegram API Error: ${errorData.description || response.statusText}`)
      }

      const result = await response.json()
      console.log('‚úÖ Telegram message sent successfully:', result.message_id)
      return result
    } catch (error) {
      console.error('‚ùå Failed to send Telegram message:', error)
      throw error
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  formatOrderMessage(order) {
    const { customer, items, total, pickupLocation, createdAt } = order
    
    const orderNumber = order.id.toString().slice(-6)
    const orderDate = new Date(createdAt).toLocaleString('ru-RU')
    
    let message = `üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderNumber}</b>\n\n`
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    message += `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>\n`
    message += `‚Ä¢ –ò–º—è: ${customer.name}\n`
    message += `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${customer.phone}\n`
    if (customer.email) {
      message += `‚Ä¢ Email: ${customer.email}\n`
    }
    if (customer.comment) {
      message += `‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${customer.comment}\n`
    }
    
    message += `\nüìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderDate}\n`
    message += `üìç <b>–°–∞–º–æ–≤—ã–≤–æ–∑:</b> ${pickupLocation}\n\n`
    
    // –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    message += `üõçÔ∏è <b>–¢–æ–≤–∞—Ä—ã (${items.length}):</b>\n`
    items.forEach((item, index) => {
      const itemTotal = item.price * item.quantity
      message += `${index + 1}. ${item.brand} ${item.name}\n`
      message += `   üí∞ ${item.price.toLocaleString()} ‚ÇΩ √ó ${item.quantity} = ${itemTotal.toLocaleString()} ‚ÇΩ\n`
    })
    
    // –ò—Ç–æ–≥–æ
    message += `\nüí∞ <b>–ò–¢–û–ì–û: ${total.toLocaleString()} ‚ÇΩ</b>\n\n`
    
    // –°—Ç–∞—Ç—É—Å
    message += `üìä <b>–°—Ç–∞—Ç—É—Å:</b> ${this.getStatusEmoji(order.status)} ${this.getStatusText(order.status)}\n`
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (order.moyskladId) {
      message += `üîó <b>–ú–æ–π–°–∫–ª–∞–¥ ID:</b> ${order.moyskladId}\n`
    }
    
    return message
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
  getStatusEmoji(status) {
    const statusEmojis = {
      'pending': '‚è≥',
      'processing': 'üîÑ',
      'ready': '‚úÖ',
      'completed': 'üéâ',
      'cancelled': '‚ùå'
    }
    return statusEmojis[status] || '‚ùì'
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
  getStatusText(status) {
    const statusTexts = {
      'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'ready': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
      'completed': '–í—ã–¥–∞–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async sendNewOrderNotification(order) {
    try {
      const message = this.formatOrderMessage(order)
      await this.sendMessage(message)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      const readyMessage = `‚è∞ <b>–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:</b> –ß–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞\n`
      const readyMessage2 = `üìû <b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!</b>\n`
      
      await this.sendMessage(readyMessage)
      await this.sendMessage(readyMessage2)
      
      return true
    } catch (error) {
      console.error('Failed to send new order notification:', error)
      return false
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
  async sendStatusUpdateNotification(order, oldStatus, newStatus) {
    try {
      const orderNumber = order.id.toString().slice(-6)
      const message = `üìä <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê #${orderNumber}</b>\n\n`
      message += `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å ${this.getStatusEmoji(oldStatus)} ${this.getStatusText(oldStatus)} –Ω–∞ ${this.getStatusEmoji(newStatus)} ${this.getStatusText(newStatus)}\n\n`
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer.name}\n`
      message += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer.phone}\n`
      
      await this.sendMessage(message)
      return true
    } catch (error) {
      console.error('Failed to send status update notification:', error)
      return false
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  async sendDailyReport(orders) {
    try {
      const today = new Date().toLocaleDateString('ru-RU')
      const todayOrders = orders.filter(order => {
        const orderDate = new Date(order.createdAt).toLocaleDateString('ru-RU')
        return orderDate === today
      })
      
      const totalOrders = todayOrders.length
      const totalRevenue = todayOrders.reduce((sum, order) => sum + order.total, 0)
      const pendingOrders = todayOrders.filter(order => order.status === 'pending').length
      
      let message = `üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ - ${today}</b>\n\n`
      message += `üì¶ –ó–∞–∫–∞–∑–æ–≤ –∑–∞ –¥–µ–Ω—å: ${totalOrders}\n`
      message += `üí∞ –í—ã—Ä—É—á–∫–∞: ${totalRevenue.toLocaleString()} ‚ÇΩ\n`
      message += `‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${pendingOrders}\n\n`
      
      if (todayOrders.length > 0) {
        message += `üõçÔ∏è <b>–ó–∞–∫–∞–∑—ã –∑–∞ –¥–µ–Ω—å:</b>\n`
        todayOrders.forEach((order, index) => {
          const orderNumber = order.id.toString().slice(-6)
          message += `${index + 1}. #${orderNumber} - ${order.customer.name} - ${order.total.toLocaleString()} ‚ÇΩ\n`
        })
      }
      
      await this.sendMessage(message)
      return true
    } catch (error) {
      console.error('Failed to send daily report:', error)
      return false
    }
  }

  // –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendTestMessage() {
    try {
      const message = `ü§ñ <b>–¢–ï–°–¢ –ë–û–¢–ê CHRONOS ISLAND</b>\n\n`
      message += `‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n`
      message += `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`
      message += `üîó –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö`
      
      await this.sendMessage(message)
      return true
    } catch (error) {
      console.error('Failed to send test message:', error)
      return false
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const telegramService = new TelegramService()

export default telegramService
